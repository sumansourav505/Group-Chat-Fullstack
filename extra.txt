// // Select a group to view messages
// async function selectGroup(groupId, groupName) {
//     selectedGroupId = groupId;
//     groupTitle.textContent = groupName;
//     messagesDiv.innerHTML = "";
//     loadGroupMessages();
// }

// // Load messages for the selected group
// async function loadGroupMessages() {
//     if (!selectedGroupId) return;

//     try {
//         const response = await fetch(`${baseURL}/group/messages/${selectedGroupId}`, {  // ✅ Fix query parameter issue
//             headers: { Authorization: `Bearer ${token}` }
//         });

//         if (!response.ok) {
//             throw new Error(`HTTP Error! Status: ${response.status}`);
//         }

//         const messages = await response.json();
//         messagesDiv.innerHTML = "";

//         messages.forEach(msg => appendMessage(msg));
//     } catch (error) {
//         console.error("Error loading messages:", error);
//     }
// }

// // Append messages to the chat window
// function appendMessage(msg) {
//     const messageDiv = document.createElement("div");
//     messageDiv.classList.add("message");
//     if (msg.userId === userId) {
//         messageDiv.classList.add("user-message");
//     }

//     messageDiv.innerHTML = `<strong>${msg.User?.name || "Unknown"}:</strong> ${msg.message}`;
//     messagesDiv.appendChild(messageDiv);

//     // Scroll to bottom
//     messagesDiv.scrollTop = messagesDiv.scrollHeight;
// }

// // Send a message in the selected group
// async function sendMessage() {
//     if (!selectedGroupId) {
//         alert("Select a group first!");
//         return;
//     }

//     const message = messageInput.value.trim();
//     if (!message) return;

//     try {
//         await fetch(`${baseURL}/group/message`, {  // ✅ Fix incorrect route
//             method: "POST",
//             headers: {
//                 "Content-Type": "application/json",
//                 Authorization: `Bearer ${token}`
//             },
//             body: JSON.stringify({ groupId: selectedGroupId, message })
//         });

//         messageInput.value = "";
//         loadGroupMessages(); // Refresh messages after sending
//     } catch (error) {
//         console.error("Error sending message:", error);
//     }
// }
controler/group.js
// Invite a user to a group
// exports.inviteUser = async (req, res) => {
//     try {
//         const { groupId, userId } = req.body;

//         const existingMember = await GroupMember.findOne({ where: { groupId, userId } });
//         if (existingMember) return res.status(400).json({ message: 'User already in the group' });

//         await GroupMember.create({ groupId, userId, role: 'member' });

//         res.json({ message: 'User added to the group' });
//     } catch (error) {
//         res.status(500).json({ error: 'Internal Server Error' });
//     }
// };
// Send a message in a group
// exports.sendMessage = async (req, res) => {
//     try {
//         const { groupId, message } = req.body;
//         const userId = req.user.id;

//         const isMember = await GroupMember.findOne({ where: { groupId, userId } });
//         if (!isMember) return res.status(403).json({ message: 'You are not a member of this group' });

//         const msg = await Message.create({ groupId, userId, message });
//         res.status(201).json(msg);
//     } catch (error) {
//         res.status(500).json({ error: 'Internal Server Error' });
//     }
// };

// Get messages for a group
// exports.getGroupMessages = async (req, res) => {
//     try {
//         const { groupId } = req.params;
//         const userId = req.user.id;

//         const isMember = await GroupMember.findOne({ where: { groupId, userId } });
//         if (!isMember) return res.status(403).json({ message: 'You are not a member of this group' });

//         const messages = await Message.findAll({
//             where: { groupId },
//             include: { model: User, attributes: ['id', 'name'] },
//             order: [['createdAt', 'ASC']]
//         });

//         res.json(messages);
//     } catch (error) {
//         res.status(500).json({ error: 'Internal Server Error' });
//     }
// };
